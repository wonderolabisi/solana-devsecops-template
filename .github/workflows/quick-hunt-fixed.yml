name: 🎯 Quick Bug Bounty Hunter

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Quick target selection'
        required: true
        type: choice
        options:
          - 'compound-finance/compound-protocol (Up to $1M)'
          - 'Uniswap/v3-core (Up to $2M)'
          - 'aave/aave-v3-core (Up to $1M)'
          - 'pancakeswap/pancake-contracts (Up to $500K)'
          - 'sushiswap/sushiswap (Up to $300K)'
          - 'curvefi/curve-contract (Up to $250K)'
          - 'balancer/balancer-v2-monorepo (Up to $100K)'
          - 'Custom (enter below)'
        default: 'compound-finance/compound-protocol (Up to $1M)'
      custom_repo:
        description: 'Custom repository (if Custom selected above)'
        required: false
        type: string
      contract_address:
        description: 'Deployed contract address (optional)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  quick-hunt:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Parse target selection
      id: parse_target
      run: |
        TARGET="${{ github.event.inputs.target }}"
        
        if [[ "$TARGET" == "Custom (enter below)" ]]; then
          REPO="${{ github.event.inputs.custom_repo }}"
          PLATFORM="Custom"
        else
          # Extract repo from selection
          case "$TARGET" in
            "compound-finance/compound-protocol"*) 
              REPO="compound-finance/compound-protocol"
              PLATFORM="Immunefi"
              ;;
            "Uniswap/v3-core"*)
              REPO="Uniswap/v3-core" 
              PLATFORM="Immunefi"
              ;;
            "aave/aave-v3-core"*)
              REPO="aave/aave-v3-core"
              PLATFORM="Immunefi"
              ;;
            "pancakeswap/pancake-contracts"*)
              REPO="pancakeswap/pancake-contracts"
              PLATFORM="Immunefi"
              ;;
            "sushiswap/sushiswap"*)
              REPO="sushiswap/sushiswap"
              PLATFORM="Immunefi"
              ;;
            "curvefi/curve-contract"*)
              REPO="curvefi/curve-contract"
              PLATFORM="Immunefi"
              ;;
            "balancer/balancer-v2-monorepo"*)
              REPO="balancer/balancer-v2-monorepo"
              PLATFORM="Immunefi"
              ;;
            *)
              REPO="compound-finance/compound-protocol"
              PLATFORM="Immunefi"
              ;;
          esac
        fi
        
        echo "target_repo=$REPO" >> $GITHUB_OUTPUT
        echo "bounty_platform=$PLATFORM" >> $GITHUB_OUTPUT
        echo "🎯 Selected target: $REPO on $PLATFORM"

    - name: Download target repository
      env:
        TARGET_REPO: ${{ steps.parse_target.outputs.target_repo }}
      run: |
        echo "🚀 Setting up bug bounty analysis for: $TARGET_REPO"
        
        # Extract repo details
        REPO_NAME=$(echo "$TARGET_REPO" | cut -d'/' -f2)
        
        echo "📥 Downloading target repository for analysis..."
        
        # Download repository as ZIP (no authentication required)
        curl -L "https://github.com/$TARGET_REPO/archive/refs/heads/main.zip" -o repo.zip || \
        curl -L "https://github.com/$TARGET_REPO/archive/refs/heads/master.zip" -o repo.zip || {
          echo "❌ Failed to download repository"
          exit 1
        }
        
        # Extract repository
        unzip -q repo.zip
        
        # Find extracted directory (could be main or master branch)
        EXTRACTED_DIR=$(find . -maxdepth 1 -type d -name "${REPO_NAME}-*" | head -1)
        
        if [ -z "$EXTRACTED_DIR" ]; then
          echo "❌ Could not find extracted repository directory"
          ls -la
          exit 1
        fi
        
        # Rename to standard name
        mv "$EXTRACTED_DIR" target-project
        
        echo "✅ Repository downloaded and ready for security analysis"

    - name: Setup security analysis files
      run: |
        cd target-project
        echo "🔧 Setting up comprehensive security analysis infrastructure..."
        
        # Create security analysis directories
        mkdir -p .github/workflows
        mkdir -p security-config
        mkdir -p docs/security
        mkdir -p reports
        
        # Download essential security files from our template repository
        echo "📦 Downloading security analysis configuration..."
        
        # Download requirements.txt
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/requirements.txt -o requirements.txt
        
        # Download slither config
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/slither.config.json -o slither.config.json
        
        # Download hardhat config
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/hardhat.config.js -o hardhat.config.js
        
        # Download analysis scripts
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/analyze-multi-contracts.sh -o analyze-multi-contracts.sh
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/analyze-multi-contracts.ps1 -o analyze-multi-contracts.ps1
        chmod +x analyze-multi-contracts.sh
        
        # Download main security workflow
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/.github/workflows/devsecops.yml -o .github/workflows/devsecops.yml
        
        echo "✅ Security analysis files configured successfully"

    - name: Create bug bounty configuration
      env:
        TARGET_REPO: ${{ steps.parse_target.outputs.target_repo }}
        CONTRACT_ADDRESS: ${{ github.event.inputs.contract_address }}
        BOUNTY_PLATFORM: ${{ steps.parse_target.outputs.bounty_platform }}
      run: |
        cd target-project
        echo "📋 Creating bug bounty hunting configuration..."
        
        # Create bug bounty config
        cat > security-config/bug-bounty-config.json << EOF
        {
          "target": {
            "repository": "$TARGET_REPO",
            "contract_address": "$CONTRACT_ADDRESS",
            "bounty_platform": "$BOUNTY_PLATFORM", 
            "analysis_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "hunter": "${{ github.actor }}"
          },
          "analysis_config": {
            "slither_enabled": true,
            "mythril_enabled": true,
            "echidna_enabled": true,
            "semgrep_enabled": true,
            "multi_contract_analysis": true,
            "deployed_contract_analysis": $([ -n "$CONTRACT_ADDRESS" ] && echo "true" || echo "false")
          },
          "bounty_info": {
            "max_severity": "Critical",
            "focus_areas": [
              "Cross-contract reentrancy",
              "Flash loan attacks",
              "Oracle manipulation", 
              "Access control bypass",
              "Governance exploits"
            ]
          }
        }
        EOF

    - name: Generate setup summary
      env:
        TARGET_REPO: ${{ steps.parse_target.outputs.target_repo }}
        CONTRACT_ADDRESS: ${{ github.event.inputs.contract_address }}
        BOUNTY_PLATFORM: ${{ steps.parse_target.outputs.bounty_platform }}
      run: |
        cd target-project
        echo "📊 Generating bug bounty setup summary..."
        
        # Count files for analysis
        SOL_FILES=$(find . -name "*.sol" 2>/dev/null | wc -l)
        RS_FILES=$(find . -name "*.rs" 2>/dev/null | wc -l)
        
        cat > BUG_BOUNTY_SETUP_COMPLETE.md << EOF
        # 🎉 Bug Bounty Analysis Setup Complete!
        
        ## 📋 Target Information
        - **Repository**: $TARGET_REPO
        - **Contract**: ${CONTRACT_ADDRESS:-'Source analysis only'}
        - **Platform**: $BOUNTY_PLATFORM
        - **Hunter**: ${{ github.actor }}
        - **Setup Date**: $(date)
        
        ## 📊 Code Analysis Ready
        - **Solidity Files**: $SOL_FILES
        - **Rust Files**: $RS_FILES
        - **Analysis Tools**: ✅ Configured and ready
        
        ## 🚀 Bug Hunting Environment Ready
        ✅ **Multi-tool Security Analysis** - Slither, Mythril, Echidna, Semgrep
        ✅ **Cross-contract Detection** - Advanced interaction analysis
        ✅ **DeFi Pattern Recognition** - Flash loans, oracles, governance
        ✅ **Local Analysis Scripts** - Manual deep-dive capabilities
        ✅ **Bug Bounty Documentation** - Ready-to-submit reports
        
        ## 💰 Expected Bounty Values
        - **Cross-contract Reentrancy**: \$500K - \$2M
        - **Flash Loan Attacks**: \$1M - \$5M
        - **Oracle Manipulation**: \$2M - \$10M
        - **Governance Exploits**: \$500K - \$2M
        
        ## 🎯 Next Steps
        1. **Run Analysis**: \`./analyze-multi-contracts.sh\` or \`.\analyze-multi-contracts.ps1\`
        2. **Check Reports**: Review \`reports/\` directory for findings
        3. **Focus High-Value**: Target million-dollar vulnerability patterns
        4. **Develop Exploits**: Create proof-of-concept demonstrations
        5. **Submit Bounties**: Use reports for $BOUNTY_PLATFORM submissions
        
        **Ready to hunt million-dollar bugs! 🏆💰**
        EOF
        
        echo ""
        echo "🎉 BUG BOUNTY SETUP COMPLETE!"
        echo "🎯 Target: $TARGET_REPO"
        echo "💰 Platform: $BOUNTY_PLATFORM"
        echo "🏆 Ready to hunt million-dollar bugs!"

    - name: Upload analysis setup
      uses: actions/upload-artifact@v4
      with:
        name: bug-bounty-analysis-${{ steps.parse_target.outputs.target_repo }}-${{ github.run_number }}
        path: |
          target-project/BUG_BOUNTY_SETUP_COMPLETE.md
          target-project/security-config/bug-bounty-config.json
          target-project/requirements.txt
          target-project/slither.config.json
          target-project/analyze-multi-contracts.sh
          target-project/analyze-multi-contracts.ps1
        retention-days: 30
