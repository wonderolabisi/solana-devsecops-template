name: Multi-Chain DevSecOps Bug Bounty Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly runs on Monday 2 AM
  workflow_dispatch:     # Manual trigger

env:
  FOUNDRY_PROFILE: ci

jobs:
  audit:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Install Solana CLI with robust SSL handling
      run: |
        echo "🌟 Installing Solana CLI with SSL-resilient methods..."
        
        # Method 1: Try official installer with SSL fallback options
        echo "📦 Method 1: Official installer with enhanced SSL..."
        if curl --insecure --retry 3 --retry-delay 5 --connect-timeout 30 --max-time 300 -sSfL https://release.solana.com/v1.17.15/install | sh -s - -b $HOME/.local/bin; then
          echo "✅ Solana CLI installed via official installer"
        else
          echo "⚠️  Official installer failed, trying GitHub release..."
          
          # Method 2: Direct GitHub release download (more reliable)
          SOLANA_VERSION="1.17.15"
          BINARY_URL="https://github.com/solana-labs/solana/releases/download/v${SOLANA_VERSION}/solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          
          echo "📦 Method 2: Direct GitHub binary download..."
          if curl --insecure --retry 3 --connect-timeout 30 -L -o solana-release.tar.bz2 "$BINARY_URL"; then
            echo "✅ Downloaded Solana binary from GitHub"
            
            # Extract and install
            tar -xjf solana-release.tar.bz2
            mkdir -p "$HOME/.local/bin"
            cp solana-release/bin/* "$HOME/.local/bin/"
            chmod +x "$HOME/.local/bin"/*
            echo "✅ Solana CLI installed via GitHub release"
          else
            echo "⚠️  GitHub download failed, trying pre-built binaries..."
            
            # Method 3: Use apt package manager as last resort
            echo "📦 Method 3: Package manager installation..."
            sudo apt-get update -qq
            if wget -qO - https://apt.solana.com/solana-release.gpg | sudo apt-key add - 2>/dev/null && \
               echo "deb https://apt.solana.com/ solana-release main" | sudo tee /etc/apt/sources.list.d/solana-release.list >/dev/null && \
               sudo apt-get update -qq && \
               sudo apt-get install -y solana-cli-tools 2>/dev/null; then
              echo "✅ Solana CLI installed via package manager"
              # Create symlinks to expected location
              mkdir -p "$HOME/.local/bin"
              ln -sf /usr/bin/solana* "$HOME/.local/bin/" 2>/dev/null || true
            else
              echo "❌ All Solana installation methods failed!"
              echo "Continuing with Ethereum-only analysis..."
              exit 0  # Don't fail the entire workflow
            fi
          fi
        fi
        
        # CRITICAL: Ensure PATH is set for current shell AND subsequent steps
        export PATH="$HOME/.local/bin:$PATH"
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Verify installation and accessibility
        if command -v solana >/dev/null 2>&1; then
          echo "✅ Solana CLI successfully installed and accessible"
          solana --version
        else
          echo "⚠️  Solana CLI installed but not accessible - checking binaries..."
          ls -la "$HOME/.local/bin/solana"* 2>/dev/null || echo "No Solana binaries found in $HOME/.local/bin"
        fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Python Build Environment
      run: |
        echo "🐍 Setting up Python build environment..."
        python --version
        pip --version
        
        # Upgrade pip and install essential build tools
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel build
        
        # Install distutils and build dependencies for compatibility
        pip install setuptools-scm setuptools-rust distlib || echo "Build tools partially installed"
        
        # Ensure distutils is available for older packages
        python -c "import distutils" 2>/dev/null || pip install setuptools

    - name: Install Anchor CLI
      run: |
        npm install -g @coral-xyz/anchor-cli@latest

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Create reports directory
      run: mkdir -p reports

    - name: Install dependencies
      run: |
        npm install || echo "NPM install failed, continuing..."
        
        echo "📦 Installing Python security tools with compatible Web3 7.x ecosystem..."
        
        # First, ensure clean environment by removing conflicting packages
        pip uninstall -y web3 eth-abi eth-account eth-keys eth-typing eth-utils || echo "No conflicting packages to remove"
        
        # Install compatible Web3 7.x ecosystem with exact versions
        pip install "web3==7.12.1" "eth-abi==5.0.1" "eth-account==0.13.7" "eth-keys==0.4.0" "eth-utils==4.1.1"
        
        # Install security analysis tools
        pip install "slither-analyzer>=0.9.0,<1.0.0"
        pip install "mythril>=0.23.0,<1.0.0"  
        pip install "solc-select>=1.0.0,<2.0.0"
        pip install "requests>=2.28.0,<3.0.0"
        pip install "semgrep>=1.0.0,<2.0.0"
        
        echo "✅ All Python dependencies installed successfully"

    - name: Verify Solana CLI
      run: |
        echo "🔍 Verifying Solana CLI installation and PATH..."
        if command -v solana >/dev/null 2>&1; then
          echo "✅ Solana CLI found in PATH"
          solana --version
          echo "SOLANA_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "⚠️  Solana CLI not found in PATH, checking absolute path..."
          if [ -x "$HOME/.local/share/solana/install/active_release/bin/solana" ]; then
            echo "✅ Solana CLI found via absolute path, adding to PATH"
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
            "$HOME/.local/share/solana/install/active_release/bin/solana" --version
            echo "SOLANA_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "❌ Solana CLI not found - will skip Solana-specific analysis"
            echo "SOLANA_AVAILABLE=false" >> $GITHUB_ENV
          fi
        fi

    - name: Setup Solidity compiler
      run: |
        solc-select install 0.8.19
        solc-select use 0.8.19

    - name: Verify Installations
      run: |
        echo "🔧 Verifying tool installations..."
        solana --version || echo "Solana not available"
        anchor --version || echo "Anchor not available"
        rustc --version || echo "Rust not available"
        slither --version || echo "Slither not available"
        myth version || echo "Mythril not available"

    - name: Multi-Chain Security Analysis
      run: |
        echo "🔍 Running multi-chain security analysis..."
        
        # Ethereum/Solidity Analysis
        if [ -d "contracts" ] && ls contracts/*.sol 1> /dev/null 2>&1; then
          echo "📝 Found Solidity contracts, running Ethereum analysis..."
          
          # Run Slither - critical step, should fail if there are serious issues
          echo "🐍 Running Slither analysis..."
          slither . --json reports/slither-report.json
          
          # Run Mythril on contracts - timeout but don't mask failures
          find contracts -name "*.sol" | head -5 | while read contract; do
            echo "🧙 Analyzing $contract with Mythril..."
            timeout 300 myth analyze "$contract" --solv 0.8.19 --json > "reports/mythril-$(basename $contract .sol).json" 2>&1
          done
        fi
        
        # Solana/Rust Analysis (conditional on Solana CLI availability)
        if [ -f "Anchor.toml" ] || [ -f "Cargo.toml" ]; then
          echo "🦀 Found Rust/Anchor project, checking Solana CLI availability..."
          
          if command -v solana >/dev/null 2>&1; then
            echo "✅ Solana CLI available, running full Solana analysis..."
            
            # Setup Solana config
            solana config set --url localhost
            solana-keygen new --no-bip39-passphrase --silent
          else
            echo "⚠️  Solana CLI not available, running Rust-only analysis..."
          fi
          
          # Rust security audit - works with or without Solana CLI
          echo "🔍 Running Cargo security audit..."
          cargo install cargo-audit
          cargo audit --json > reports/cargo-audit.json
          
          # Clippy analysis - should catch serious linting issues
          echo "📎 Running Clippy analysis..."
          cargo clippy --all-targets --all-features -- -D warnings > reports/clippy-analysis.txt 2>&1
          
          # Anchor tests (only if Solana CLI is available)
          if [ -f "Anchor.toml" ] && command -v solana >/dev/null 2>&1; then
            echo "⚓ Running Anchor tests..."
            anchor test > reports/anchor-test.log 2>&1
          elif [ -f "Anchor.toml" ]; then
            echo "⚠️  Skipping Anchor tests - Solana CLI not available"
          fi
        fi
          
          # Anchor tests
          if [ -f "Anchor.toml" ]; then
            anchor test > reports/anchor-test.log 2>&1 || echo "Anchor tests completed"
          fi
        fi

    - name: Generate Security Report
      run: |
        echo "📋 Generating comprehensive security report..."
        
        cat > reports/SECURITY_SUMMARY.md << 'EOF'
        # 🛡️ Multi-Chain Security Audit Summary
        
        **Generated:** $(date)
        **Repository:** ${{ github.repository }}
        **Commit:** ${{ github.sha }}
        
        ## 📊 Analysis Coverage
        
        ### 🔍 Tools Used:
        - ✅ Slither (Ethereum/Solidity)
        - ✅ Mythril (Symbolic Execution)
        - ✅ Cargo Audit (Rust/Solana)
        - ✅ Clippy (Rust Linting)
        - ✅ Anchor Testing (Solana)
        
        ## 📁 Files Analyzed:
        EOF
        
        # Count analyzed files
        if [ -d "contracts" ]; then
          echo "- **Solidity contracts**: $(find contracts -name "*.sol" | wc -l)" >> reports/SECURITY_SUMMARY.md
        fi
        
        if [ -d "programs" ]; then
          echo "- **Rust programs**: $(find programs -name "*.rs" | wc -l)" >> reports/SECURITY_SUMMARY.md
        fi
        
        echo "" >> reports/SECURITY_SUMMARY.md
        echo "## 🚀 Next Steps" >> reports/SECURITY_SUMMARY.md
        echo "1. 🔍 Review all findings in the reports directory" >> reports/SECURITY_SUMMARY.md
        echo "2. 🛡️ Implement security fixes for identified issues" >> reports/SECURITY_SUMMARY.md
        echo "3. 🔄 Re-run analysis after fixes" >> reports/SECURITY_SUMMARY.md
        echo "4. 💰 Submit to bug bounty platforms if issues found" >> reports/SECURITY_SUMMARY.md

    - name: Archive all reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-reports-${{ github.sha }}
        path: reports/
        retention-days: 90

    - name: Comment PR with Summary (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/SECURITY_SUMMARY.md')) {
            const summary = fs.readFileSync('reports/SECURITY_SUMMARY.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
